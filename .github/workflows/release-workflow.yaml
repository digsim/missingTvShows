name: Publish Python 🐍 distribution 📦 to PyPI and TestPyPI

# this file is *not* meant to cover or endorse the use of GitHub Actions, but rather to
# help make automated releases for this project

permissions:
  contents: write
  packages: write
  issues: read
  checks: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to release'
        default: 'master'

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    env:
      CI_COMMIT_MESSAGE: Continuous Integration Build Artifacts
      CI_COMMIT_AUTHOR: Continuous Integration
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install tox and pex dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build zest.releaser pex tox tox-gh

    - name: Prerelease
      run: |
        git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
        git config --global user.email "username@users.noreply.github.com"
        prerelease --no-input

    - name: Check pypi versions
      uses: maybe-hello-world/pyproject-check-version@v4
      id: versioncheck
      with:
        pyproject-path: "./pyproject.toml"
        test-regex: "[0-9]+.[0-9]+.[0-9]+dev[0-9]+"

    - name: Build a binary wheel and a source tarball
      run: python3 -m build

    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Build pex package
      run: tox -e package
      env:
        PACKAGE_VERSION: ${{ steps.versioncheck.outputs.local_version }}

    # Commit and push all changed files.
    - name: GIT create tag
      run: |
        git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
        git config --global user.email "username@users.noreply.github.com"
        git tag ${{ steps.versioncheck.outputs.local_version }}
        git push --follow-tags

    - name: Postrelease
      run: |
        git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
        git config --global user.email "username@users.noreply.github.com"
        postrelease --no-input
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions-incl-pex
        path: dist/


  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    #if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/missingTvShows
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@v1.10.3
      with:
        #repository-url: https://test.pypi.org/legacy/
        skip-existing: true

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
    - build
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - uses: actions/checkout@v4
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions-incl-pex
        path: dist/

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
          ./dist/*.pex

    - name: Save Tag version
      id: version
      run: |
        echo "TAG_NAME=$(ls dist/ |grep whl |awk -F "-" '{print $2}'  | head -n 1 |tr -d -)" >> "$GITHUB_ENV"

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create $TAG_NAME --repo '${{ github.repository }}' -F CHANGES.rst

    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload $TAG_NAME dist/** --repo '${{ github.repository }}'
